* --COPYRIGHT--,BSD_EX
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************
 *
 *                       MSP430 CODE EXAMPLE DISCLAIMER
 *
 * MSP430 code examples are self-contained low-level programs that typically
 * demonstrate a single peripheral function or device feature in a highly
 * concise manner. For this the code may rely on the device's power-on default
 * register values and settings such as the clock configuration and care must
 * be taken when combining code from several examples to avoid potential side
 * effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
 * for an API functional library-approach to peripheral configuration.
 *
 * --/COPYRIGHT--*/
//******************************************************************************



#include <msp430.h>

static volatile int count = 0;   // Global variable to count

int main(void)
{
      WDTCTL = WDTPW | WDTHOLD;                 // Stop watchdog timer (WDT)

      P1DIR |= BIT0;                          // Set P1.0 to output direction
      P1OUT |= BIT1;                          // Set P1.1 to output direction
      P1DIR &= ~BIT1;                         // Change P1.1  from output to input
      P1REN |= BIT1;                          // Enables internal resistor so it can be connected to 3.3v and ground
      P1IES &= ~BIT1;                         // Set interrupt flag on lo to hi
      P1IE |= BIT1;                           // Enable interrupt for P1.3
      P1IFG &= ~BIT1;                         // Clear P1.3 interrupt flag so no immediate interrupt



      PM5CTL0 &= ~LOCKLPM5;                  // Disable the GPIO power-on default high-impedance mode to activate
                                             // previously configured port settings

      TA0CCTL0 = CCIE;                          // TA0CCR0 interrupt enabled
      TA0CCR0 = 3277;                           // TA0 set value to count to
      TA0CTL = TASSEL__ACLK | MC__UP;           // ACLK, up mode
      TA0CTL |= TACLR;                          // Clear


      TA1CCTL0 |= CCIE;                         // TA1CCR0 interrupt enabled
      TA1CTL = TASSEL__ACLK | MC__STOP;         // Configure second timer
      TA1CCR0 = 512;                            // Set value of TA1CCR0 for comparison
      TA1CTL |= ID_3;                           // Divide clock by 8
      TA1EX0 |= TAIDEX_7;                       // Divide clock by 8
      TA1CTL |= TACLR;                          // Clear

      __enable_interrupt();                     // Enable interrupt

      for(;;)
      {
      while(!(P1IN & BIT1))                    // While P1.3 is pressed execute code in loop
              {
                  if(TA1R == 0)                // If value in Timer1 = 0
                  {
                      TA1CTL |= TASSEL_1 + MC__UP;    // ACLK, Up Mode
                  }
              }
      }
}

// Timer0_A0 interrupt service routine
#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer0_A0_ISR (void)       // Timer 0 interrupt
{
    P1OUT ^= BIT0;                          // Toggle LED P1.0
}

// Timer1_A0 interrupt service routine
#pragma vector = TIMER1_A0_VECTOR
__interrupt void Timer1_A0_ISR (void)       // Timer 1 interrupt
{
    count++;                              // Enable count
}

#pragma vector = PORT1_VECTOR
__interrupt void P1_ISR(void)               // Button interrupt
{
      TA1CTL &= ~TASSEL_1;                  // Disable TA1
      TA0CCR0 = (count)*3277;               // Multiply the slowed down count
      TA1CTL |= TACLR;                      // Clear Timer A1
      P1IFG &= ~BIT1;                       // Clear P1.1 interrupt flag
}
