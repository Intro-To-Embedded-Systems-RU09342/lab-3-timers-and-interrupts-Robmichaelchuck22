/* --COPYRIGHT--,BSD_EX
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************
/*
 *
 */
#include <msp430.h>

int main(void)
{

      WDTCTL = WDTPW + WDTHOLD;                 // Stop watchdog timer


      P1DIR |= BIT0;                            // Set P1.0 to output direction
      P1OUT |= ~BIT0;                           // Clear P1.0
      P1DIR |= BIT6;                            // Set P1.6 to output direction
      P1OUT |= ~BIT6;                           // Clear P1.6


      TA0CCTL0 = CCIE;                          // Enable interrupt in compare mode
      TA0CTL = TASSEL_2 + MC_1 + ID_3;          // SMCLK, 1Mhz/8, Up
      TA0CCR0 = 10000;                          //12.5hz


      TA1CCTL0 = CCIE;                          // Enable interrupt in compare mode
      TA1CTL = TASSEL_2 + MC_1 + ID_2;          // SMCLK/4, Up
      TA1CCR0 = 250000/ 10;                     // 250000 / 10 = 25000 = 10Hz

      __enable_interrupt();                 // Enable interrupt
      __bis_SR_register(LPM0 + GIE);        // Input LPMO (Low-power mode 0) with GIE (General Interrupt Enable)
}


#pragma vector=TIMER1_A0_VECTOR
__interrupt void TIMER_A1(void)

    {
      P1OUT ^= BIT6;                // Toggle LED: P1.6
    }

#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER_A0(void)

    {
      P1OUT ^= BIT0;                // Toggle LED: P1.0

    }

